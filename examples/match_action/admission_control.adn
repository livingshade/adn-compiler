// Reference: https://sre.google/sre-book/handling-overload/
// Modulo the sliding window

internal {
	// Agression. Increasing the multiplier will make throttling less aggressive
	multiplier: float
	accepts: int 
	requests: int
}

fn init(multiplier) {
	multiplier := 2;
}

fn req(rpc_req) {
	requests := requests + 1;

	prob := max(0, (requests - multiplier * accepts) / (requests + 1));

	match(randomf(0,1) < prob) {
		true => {
			send(rpc_req, NET);
		}
		false => {
			send(err('admission control'), APP);
		}
	};
}

fn resp(rpc_resp) {
	match(rpc_resp) {
		Some(rpc_resp) => {
			success := success + 1;
			send(rpc_resp, APP);
		}
	};
}